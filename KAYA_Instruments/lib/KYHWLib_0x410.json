{
    "File version": 60002,
    
    // Komodo CXP II
    "Device":
    {
        "X": 1 // Just first dummy entry - no meaning
        ,"system_capabilities" : "0x200"
        ,"pocxp_i2c_monitor_min_rev" : 0
        
        ,"on_board_memory" : 0 // 0 MB
        ,"sodimm_check_address" : "0x7000"
        ,"sodimm_required" : true
        
        ,"classification" : "Host" // Main device classification "Host"(FrameGrabber)/"Slave"(Chameleon)/"FNC"/"Custom"
        ,"protocol" : "CoaXPress" // "CoaXPress"/"CLHS"/"GigE"/"Mixed"
        ,"generation" : 2
        
        //,"bar_memory_filtered": [
        //    {"bar": 2, "start": "0x58", "end": "0x5B" }
        //]
        //,"bar_memory_filtered": [
        //    {"bar": 0, "start": "0x000000", "end": "0xfffffffffff" },
        //    {"bar": 2, "start": "0x0", "end": "0x9000" }
        //]
        // Add to registry:
        // "KYHW.FilteredRange.warns" (default 1, decreased with each warn printed, stops when reaches 0 - set to 1000000 to see up to one million writes)
        // "KYHW.FilteredRange.write_warns" (default 1)
        // "KYHW.FilteredRange.read_warns" (default 1)
        
        // Tracking avalon fifo (aka Butterfly) access (when "end" is not specified it is assumed same as "start")
        //,"bar_memory_filtered": [
        //     {"bar": 2, "start": "0x0000A800", "comment": "0x02 - Reset meta data FIFO interrupt, 0x01 - Enable, 0x00 - Disable metadata interrupt 3"}
        //    
        //    ,{"bar": 2, "start": "0x0000A050", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A0D0", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A150", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A1D0", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A250", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A2D0", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A350", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //    ,{"bar": 2, "start": "0x0000A3D0", "comment": "0xFF - Reset events, 0x00 - Disable Avalon MM RX FIFO" } 
        //
        //    ,{"bar": 2, "start": "0x0000A054", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A0D4", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A154", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A1D4", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A254", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A2D4", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A354", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //    ,{"bar": 2, "start": "0x0000A3D4", "comment": "0x04 - Enable, 0x00 - Disable Avalon MM RX FIFO Interrupt Mask" } 
        //
        //    ,{"bar": 2, "start": "0x00000040", "comment": "0x00 - Reset global interrupt status" } 
        //    ,{"bar": 2, "start": "0x00000050", "comment": "0xFF - Enable, 0x00 - Disable global mask" } 
        //]
        
        ,"io_features_value" : "0x28004484"  // [3..0] Encoders - 4, [7..4] Timers - 8, [11..8] Stream Triggers - 4, 
                                             // [15..12] Camera Triggers - 4, [31..24] LineIO - 40 (Default: 0x28004444)
                                             
        ,"InitialParameterValues": {
            "DevicePciGenerationMin": 3
            ,"DevicePciLanesMin": 8
        }
        /*
        ,"CleanupSequence": [
            {"comment": "nSupportedStreams"}
            ,{"bar": 0, "address": ["0x00402000", "0x0"], "value": 0} // stream_disable
            ,{"bar": 0, "address": ["0x00402000", "0x0"], "value": 2} // stream_reset"
            ,{"bar": 0, "address": ["0x00403000", "0x0"], "value": 0} // stream_disable
            ,{"bar": 0, "address": ["0x00403000", "0x0"], "value": 2} // stream_reset"
            ,{"bar": 0, "address": ["0x00404000", "0x0"], "value": 0} // stream_disable
            ,{"bar": 0, "address": ["0x00404000", "0x0"], "value": 2} // stream_reset"
            ,{"bar": 0, "address": ["0x00405000", "0x0"], "value": 0} // stream_disable
            ,{"bar": 0, "address": ["0x00405000", "0x0"], "value": 2} // stream_reset"

            ,{"comment": "DMAControllers"}
            ,{"bar": 2, "address": ["0x00008000", "0x40", "0x0"], "value": 2} //if (refKYHW_HANDLE_STRUCT.m_bDmaMetainfo) csr_base + CSR_INTERRUPT_META_DATA_OFFSET + META_CONTROL_REGISTER_OFFSET
            ,{"bar": 2, "address": ["0x00008000", "0x4"        ], "value": 1} // reconstruct 'stop_dispatcher': csr_base + CSR_CONTROL_REG => CSR_STOP_MASK
            ,{"bar": 2, "address": ["0x00008000", "0x4"        ], "value": 2} // reconstruct 'reset_dispatcher': csr_base + CSR_CONTROL_REG => CSR_RESET_MASK ( == (1<<1))
            ,{"bar": 2, "address": ["0x00008000", "0x4"        ], "value": "0x200"} // see implementation of stop_fetch for command to be send in order to stop DMA: csr_base + CSR_CONTROL_REG => CSR_STOP_FETCH_MASK ( == (1<<9))
            
            ,{"bar": 2, "address": ["0x00008100", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008100", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008100", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008100", "0x4"        ], "value": "0x200"}
            
            ,{"bar": 2, "address": ["0x00008200", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008200", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008200", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008200", "0x4"        ], "value": "0x200"}
            
            ,{"bar": 2, "address": ["0x00008300", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008300", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008300", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008300", "0x4"        ], "value": "0x200"}
            
            ,{"bar": 2, "address": ["0x00008400", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008400", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008400", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008400", "0x4"        ], "value": "0x200"}
            
            ,{"bar": 2, "address": ["0x00008500", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008500", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008500", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008500", "0x4"        ], "value": "0x200"}
            
            ,{"bar": 2, "address": ["0x00008600", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008600", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008600", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008600", "0x4"        ], "value": "0x200"}
            
            ,{"bar": 2, "address": ["0x00008700", "0x40", "0x0"], "value": 2} 
            ,{"bar": 2, "address": ["0x00008700", "0x4"        ], "value": 1} 
            ,{"bar": 2, "address": ["0x00008700", "0x4"        ], "value": 2} 
            ,{"bar": 2, "address": ["0x00008700", "0x4"        ], "value": "0x200"}
        ]
        */
    }
    ,"Interrupts": [
        {
            "aux_base": "0x01C0"
            ,"interrupt": 11
        }
    ]
	
	,"CommandInterrupts": [
        {
			// Interrupt controller part:
			"interrupt_base": "0xA800"
			,"csr_bar": 2
            ,"interrupt": 3
			// Command controller part:
			,"command_base": "0xA000"
        
            ,"min_fw_version" : "5.1.1"
        }
	]
    
    ,"SpeedConfig":
    {
        "SpeedConfigController": [
            {
                "type": "MacomHighSpeed"    // "None"/"MacomHighSpeed"/"MacomLowSpeed"/"MacomHighLowSpeed"/"FPGATransceiverPhyII"
                ,"csr_base": "0x5800"
                ,"csr_bar": 2
                ,"csr_speed": 20
            }
        ]
        
        ,"SpeedConfigChannels": [
            { "controller_index":0 ,"channel_select_id": 0}
            , { "controller_index":0 ,"channel_select_id": 1}
            , { "controller_index":0 ,"channel_select_id": 2}
            , { "controller_index":0 ,"channel_select_id": 3}
        ]
    }
    ,"TemperatureController":
    {
        "csr_base": "0x5008"
        ,"csr_bar": 2
        ,"formula_type": 2 // 1 - Calculation formula for Device type I, 2 - Calculation formula for Device type II
    }
    ,"FanController": // Valid only if bit 21 of system capabilities is set (SYSTEM_CAPABLE_FAN_CONTROLLER)
    {
        "bar": 0 
        ,"base_address": "0x6000" 
        ,"capabilities_address": "0x0"
        //-----------------------------
        ,"formula_type": 2 // 1 - Calculation formula for Device type I, 2 - Calculation formula for Device type II
    }
    ,"CSRController":
    {
        "base": "0x481000" // Valid only if bit 8 of system capabilities is set (SYSTEM_CSR_CONFIGURED)
    }
    
    ,"ArbiterController":
    {
        "base": "0x490000" // Valid only if bit 10 of system capabilities is set (SYSTEM_ARBITER_CONFIGURED)
        ,"Mask": "0x4"
        ,"Select": "0x0"
        ,"LinkOrder": "0x8"
        ,"ResetAddr": "0xC"
    }
    
    ,"DecoderController":
    {
        "base": "0x482000" // Valid only if bit 20 of system capabilities is set (SYSTEM_DECODER_CONFIGURED)
    }
    
    ,"HostIPController":
    {
        "host_ip_bases": [
             "0x400000",
             "0x410000",
             "0x420000",
             "0x430000",
             "0x440000",
             "0x450000",
             "0x460000",
             "0x470000"
        ]
        
        ,"supported_speeds": [
             "0x28" // LINK_SPEED_CXP1   1.25  Gbps
            ,"0x30" // LINK_SPEED_CXP2   2.5   Gbps
            ,"0x38" // LINK_SPEED_CXP3   3.125 Gbps
            ,"0x40" // LINK_SPEED_CXP5   5     Gbps
            ,"0x48" // LINK_SPEED_CXP6   6.25  Gbps
            ,"0x50" // LINK_SPEED_CXP10  10    Gbps
            ,"0x58" // LINK_SPEED_CXP12  12.5  Gbps
        ]
    }
    
    ,"DmaChannels": [
        {
            /* enum class Direction{UNDEFINED = -1, HOST2DEVICE = 0, DEVICE2HOST = 1}; */
            "ChannelDirection": 1
            ,"csr_base": "0x8000"
            ,"interrupt": 1
            ,"dmaChannelIndex": 0
            //,"isVirtual": true
        }
        ,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8100"
            ,"interrupt": 5
            ,"dmaChannelIndex": 1
        }
        ,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8200"
            ,"interrupt": 7
            ,"dmaChannelIndex": 2
        }
        ,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8300"
            ,"interrupt": 9
            ,"dmaChannelIndex": 3
        }
        /*,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8400"
            ,"interrupt": 12
            ,"dmaChannelIndex": 4
        }
        ,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8500"
            ,"interrupt": 13
            ,"dmaChannelIndex": 5
        }
        ,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8600"
            ,"interrupt": 14
            ,"dmaChannelIndex": 6
        }
        ,
        {
            "ChannelDirection": 1
            ,"csr_base": "0x8700"
            ,"interrupt": 15
            ,"dmaChannelIndex": 7
        }*/
    ]
    
    ,"PoCXP_Monitoring":
    {
        "Channels" : [
            {"slave": "0x90", "volt" : "0x8C", "curr" : "0xCC"}
            ,{"slave": "0x90", "volt" : "0x9C", "curr" : "0xDC"}
            ,{"slave": "0x90", "volt" : "0xAC", "curr" : "0xEC"}
            ,{"slave": "0x90", "volt" : "0xBC", "curr" : "0xFC"}
        ],
        "I2CController": {"base": "0x200000", "clock_source_speed":125000000, "freq":80000, "TIPSleepTime" : 125}
    }
    
    ,"Sequences": [
        {
            "Trigger" : {"parameter" : "I2CReInit"}
            // perform the following sequence
            ,
            "Sequence" : [
                    {"KYHW_Call" : ""}
            ]
        }
        ,
        {
            "Trigger" : {"parameter" : "KernelTraceCountersSet"}
            // perform the following sequence
            ,
            "Sequence" : [
                    {"KYHW_Call" : ""}
            ]
        }
        ,
        {
            "Trigger" : {"parameter" : "BarWatchAdd" }
            // perform the following sequence
            ,
            "Sequence" : [
                    {"KYHW_Call" : ""}
            ]
        }
        ,
        {
            "Trigger" : {"parameter" : "BarWatchRemove" }
            // perform the following sequence
            ,
            "Sequence" : [
                    {"KYHW_Call" : ""}
            ]
        }
        ,
        {
            "Trigger" : {"parameter" : "InterruptReadTimeout" }
            // perform the following sequence
            ,
            "Sequence" : [
                    {"KYHW_Call" : ""}
            ]
        }
        ,
        {
            "Trigger" : {"parameter" : "DeviceStreamControlReset" }
            // perform the following sequence
            ,
            "Sequence" : [
                    {"parameter" : ""}
            ]
        }
    ]
    
    ,"DDR_Monitoring":
    {
        "I2CController": {"base": "0x100000", "clock_source_speed":125000000, "freq":100000, "TIPSleepTime" : 125}
        ,"slave": "0xA0"
        ,"regs_range": {"start": "0x80 ", "end": "0x91"}
    }
}
